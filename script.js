const root = ReactDOM.createRoot(document.getElementById('root'));
// —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç App
let firstText='';
class App extends React.Component {
    constructor(props) {
        super(props);
        // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        this.state = {
            activeTab: 0,
            yellowTab: 0,


            

            // —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ –∏–Ω–ø—É—Ç–∞
            text: '',
            // –ø—É–Ω–∫—Ç—ã —Å–ø–∏—Å–∫–∞
            items: [
                {
                    text: '–ø–æ–≥—É–ª—è—Ç—å',
                    id: Date.now(),

                },
                {
                    text: "–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –æ–±–µ–¥",
                    id: 12,
                }
            ],
            tabs: [
                'All',
            ],
            modalClassList: 'modal',
            editedText: '',
            itemId: null,
        }
    }
    //    ?
    delete(i) {


        console.log(i);
        this.setState(function (state) {
            let newItems = state.items
            newItems.splice(i, 1)
            return {
                items: newItems
            }


        })
    }

    textChange(e){
        if(e.target.classList.contains('textColor')){
            e.target.classList.remove('textColor')
        }
        else{
            e.target.classList.add('textColor')
        }
    }

    handleCheck(e) {
        // if (e.target.classList.contains('checkItem')){
        //     e.target.classList.remove('checkItem')

        // }
        // else {

        //     e.target.classList.add('checkItem')
        // }
        console.log(555);

        // firstText = e.target.item.text;
        // this.state.items[0].text = e.target.item.text;
        // this.state.items[0].text = firstText;
        this.setState(function(state){
            let newItems = state.items
            newItems[0].text = e.target.innerHTML;
            return{
                items: newItems

            }
        })

    }
    removeLists(e) {
        // this.setState=[];
        this.setState(function (state) {
            return {
                items: []
            }


        })
    }
    handleEdit(i, text){
        this.setState({
            modalClassList: 'modal modalShow',
            editedText: text,
            itemId: i,

        })
    }

    editText(i ){
        // let newElement = this.state.items[i];
        // newElement.text = this.state.editedText;
        this.setState(function(state){
            let newItems = state.items;
            newItems[i].text = this.state.editedText;
            return{
                items: newItems,
                modalClassList: 'modal',
            }
        })
    }

    handleNewTab(){
        console.log(123);
        this.setState(function(state){
              let newTabs = state.tabs;
            newTabs.push('Tab '+this.state.tabs.length)
            return {
                tabs : newTabs,
            }
        })
    }
     
    // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞. 
    handleSubmit(e) {
        e.preventDefault();
        // –±—É–¥—É—â–∏–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞
        let newItem = {
            text: this.state.text,
            id: Date.now(),
        }
        // –∑–∞–¥–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 
        this.setState(function (state) {
            // –¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—É—â–∏–µ –∫–æ–ª-–≤–æ –ø—É–Ω–∫—Ç–æ–≤ 
            let newItems = state.items;
            // –í —Ç–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ –ø—É–Ω–∫—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç
            newItems.push(newItem)
            // –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ –∫–æ–ª-–≤–æ –ø—É–Ω–∫—Ç–æ–≤
            return {
                items: newItems,

            }
        },
            // –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            function () {
                console.log(this.state);
            })
    }
    // —Å–æ–∑–¥–∞–µ—Ç form 
    render() {

        return (
            <div>
                <div className={this.state.modalClassList}>
                <form className="container">
                    <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–ª–æ</h2>
                    <input type="text" className="editInput" value={this.state.editedText} onChange={(e)=> this.setState({editedText: e.target.value})} />
                    <button type='button' className='change' onClick={() => this.editText(this.state.itemId)}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
                </form>
                </div>
            {/* // onSubmit —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–æ—Ä–º—É */}
                <form action="" onSubmit={(e) => this.handleSubmit(e)}>
                    <h1 onClick={(e) => this.textChange(e)}>–°–ø–∏—Å–æ–∫ –∏–∑ {this.state.items.length} –¥–µ–ª</h1>
                    <button type='button' className='button' onClick={()=>this.handleNewTab()}>+Tab</button>
                    <ul>
                        {
                            this.state.tabs.map((tab, id)=>(
                                <Tab yellowTab={this.state.yellowTab} activeTab={this.state.activeTab} id={id} text={tab}/>
                            ))
                        }
                    </ul>
                    <ol>
                        {
                            this.state.items.map((item, i) =>(
                                <li key={item.id} >
                                    <p onClick={(e) => this.handleCheck(e)}>{item.text}</p>
                                    <button type='button' className='cross' onClick={() => this.handleEdit(i, item.text)} >üñäÔ∏è</button>
                                    <button onClick={() => this.delete(i)} className='cross' type='button'>üóëÔ∏è</button>
                                </li>
                            ))
                        }

                    </ol>
                    {/* onChange —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ input */}
                    <input type="text" placeholder='–ù–æ–≤–æ–µ –¥–µ–ª–æ' onChange={(e) => this.setState({ text: e.target.value })} value={this.state.text}/>
                    <button className='add'  disabled={this.state.text.length>20? true : false}>+</button >
                    <button type='button' className='removeAll' onClick={(e) => this.removeLists(e)}>–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—É–Ω–∫—Ç—ã</button>
                </form>
            </div>
        )
    }
}


class Tab extends React.Component{
    constructor(props){

        super(props)
        this.state={

        }
    }
    render(){
        return(

            <li className=  {'tab '+(this.props.id==this.props.activeTab? 'activeTab ':'' )+(this.props.id==this.props.yellowTab? 'yellowTab': '')}>{this.props.text}</li>
        )
        
    }
}

root.render(<App />)




// –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –¥–µ–ª–æ —Ç–µ–∫—Å—Ç –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –≤ –ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç.